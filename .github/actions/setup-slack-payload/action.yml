name: Setup Slack Payload
description: Create a payload for Slack notification

inputs:
  slack_channel_id:
    description: Slack channel ID
    required: true
  deployed:
    description: Whether the deployment was successful
    required: true
  environment:
    description: Deployment environment (Production or Preview)
    required: true
  cloudflare_account_id:
    description: Cloudflare account ID
    required: true
  cloudflare_worker_name:
    description: Name of the Cloudflare Worker
    required: true
  cloudflare_worker_domain:
    description: Domain of the Cloudflare Worker
    required: true
  pr_commit:
    description: Commit hash
    required: true
  pr_number:
    description: Pull request number
    required: true
  pr_title:
    description: Pull request title
    required: true
  pr_url:
    description: Pull request URL
    required: true
  avatar_url:
    description: GitHub avatar URL
    required: true

outputs:
  file-path:
    description: The path to the payload file
    value: ${{ steps.payload.outputs.file-path }}

runs:
  using: 'composite'
  steps:
    - name: Setup payload
      id: payload
      shell: bash
      env:
        SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}
        DEPLOYED: ${{ inputs.deployed }}
        ENVIRONMENT: ${{ inputs.environment }}
        CF_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}
        CF_WORKER_NAME: ${{ inputs.cloudflare_worker_name }}
        CF_WORKER_DOMAIN: ${{ inputs.cloudflare_worker_domain }}
        PR_COMMIT: ${{ inputs.pr_commit }}
        PR_NUMBER: ${{ inputs.pr_number }}
        PR_TITLE: ${{ inputs.pr_title }}
        PR_URL: ${{ inputs.pr_url }}
        AVATAR_URL: ${{ inputs.avatar_url }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        set -euo pipefail
        node - <<'NODE'
        const fs = require('fs');

        const deployed = process.env.DEPLOYED === 'true';
        const hasName = !!(process.env.CF_WORKER_NAME && process.env.CF_WORKER_NAME.trim());
        const hasDomain = !!(process.env.CF_WORKER_DOMAIN && process.env.CF_WORKER_DOMAIN.trim());
        const ok = deployed && hasName && hasDomain;
        const environment = process.env.ENVIRONMENT;

        const payload = {
          channel: process.env.SLACK_CHANNEL_ID,
          attachments: [{
            color: ok ? '#36a64f' : '#ff4d4d',
            blocks: []
          }]
        };

        const blocks = payload.attachments[0].blocks;

        blocks.push({
          type: 'header',
          text: { type: 'plain_text', text: ok ? `‚úÖ Cloudflare Workers ${process.env.ENVIRONMENT} Î∞∞Ìè¨ ÏôÑÎ£å` : `‚ùå Cloudflare Workers ${process.env.ENVIRONMENT} Î∞∞Ìè¨ Ïã§Ìå®`, emoji: true }
        });
        blocks.push({ type: 'divider' });

        if (ok) {
          blocks.push({
            type: 'section',
            text: { type: 'mrkdwn', text: `üåê <${process.env.CF_WORKER_DOMAIN}|*ÌéòÏù¥ÏßÄ Î∞îÎ°úÍ∞ÄÍ∏∞*>` }
          });
        }

        blocks.push({
          type: 'section',
          text: { type: 'mrkdwn', text: `*Commit*\n<https://github.com/${process.env.GITHUB_REPOSITORY}/commit/${process.env.PR_COMMIT}|${process.env.PR_COMMIT}>` }
        });
        blocks.push({
          type: 'section',
          text: { type: 'mrkdwn', text: `*Pull request*\n<${process.env.PR_URL}|[#${process.env.PR_NUMBER}] ${process.env.PR_TITLE}>` }
        });

        const elements = [{
          type: 'button',
          text: { type: 'plain_text', text: (ok ? '‚≠ê' : 'üîç') + '\t Workflow details', emoji: true },
          url: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
        }];

        if (ok) {
          elements.push({
            type: 'button',
            text: { type: 'plain_text', text: 'üìÑ\t Deployment details', emoji: true },
            url: `https://dash.cloudflare.com/${process.env.CF_ACCOUNT_ID}/workers/services/view/${process.env.CF_WORKER_NAME}/production/deployments`
          });
        }

        blocks.push({ type: 'actions', elements });
        blocks.push({ type: 'divider' });

        blocks.push({
          type: 'context',
          elements: [
            { type: 'image', image_url: process.env.AVATAR_URL, alt_text: 'avatar_img' },
            { type: 'mrkdwn', text: `<https://github.com/${process.env.GITHUB_REPOSITORY_OWNER}|*${process.env.GITHUB_REPOSITORY_OWNER}*> has approved this message.` }
          ]
        });

        fs.writeFileSync('slack_payload.json', JSON.stringify(payload, null, 2));
        NODE

        echo "file-path=slack_payload.json" >> "$GITHUB_OUTPUT"
