name: Deployment

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - release/*
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      result: ${{ steps.deploy.outcome }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Build for Cloudflare Workers
        run: pnpm build:worker
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_PUBLISHABLE_DEFAULT_KEY: ${{ secrets.SUPABASE_PUBLISHABLE_DEFAULT_KEY }}

      - name: Deploy Worker
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: ${{ github.ref_name == 'main' && 'deploy' || 'versions upload' }}
        continue-on-error: true

  parse-info:
    name: Parse Deployment Info
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      pr: ${{ steps.pr.outputs.result }}
      worker-name: ${{ steps.worker.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            wrangler.jsonc
          sparse-checkout-cone-mode: false

      - name: Check a latest pull request
        id: pr
        uses: actions/github-script@v8
        with:
          script: |
            if (context.eventName === 'pull_request') {
              const pr = context.payload.pull_request;
              const commit = context.sha.substring(0, 7);
              const avatarUrl = pr.user?.avatar_url || context.payload.repository.owner.avatar_url;

              return {
                commit,
                number: pr.number,
                title: pr.title,
                url: pr.html_url,
                avatar_url: avatarUrl
              };
            }

            const result = (await github.rest.repos.listPullRequestsAssociatedWithCommit({
              commit_sha: context.sha,
              owner: context.repo.owner,
              repo: context.repo.repo,
            }))?.data || [];

            if (result.length === 0) {
              core.info(`No pull request found for commit ${context.sha}.`);
              return '';
            };

            const latestPr = result[0];
            const commit = (latestPr.merge_commit_sha || context.sha || '').substring(0, 7);
            const avatarUrl = latestPr.user?.avatar_url || context.payload.repository.owner.avatar_url;

            return {
              commit,
              number: latestPr.number,
              title: latestPr.title,
              url: latestPr.html_url,
              avatar_url: avatarUrl
            };

      - name: Check info from wrangler.jsonc
        id: worker
        run: |
          node - << 'NODE'

          const fs = require('fs');
          const path = './wrangler.jsonc';

          try {
            const raw = fs.readFileSync(path, 'utf8');
            const stripped = raw
              .replace(/\/\*[\s\S]*?\*\//g, '')
              .replace(/^\s*\/\/.*$/mg, '');
            const json = JSON.parse(stripped);
            const name = json?.name ?? '';

            fs.appendFileSync(process.env.GITHUB_OUTPUT, `name=${name}\n`);
          } catch (e) {
            console.error('Error reading wrangler.jsonc:', e);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'name=\n');
          }

          NODE

  upload-artifact:
    name: Upload artifact for Deployment URL
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ needs.deploy.outputs.url != '' }}
    permissions:
      actions: write
    steps:
      - name: Create deployment-url artifact
        run: echo "${{ needs.deploy.outputs.url }}" > deployment-url.txt

      - name: Upload deployment-url artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-url
          path: deployment-url.txt

  comment-pr:
    name: Comment for Deployment
    runs-on: ubuntu-latest
    needs: [deploy, parse-info]
    if: ${{ needs.parse-info.outputs.pr != '' }}
    permissions:
      pull-requests: write
    steps:
      - name: Comment on pull request
        uses: actions/github-script@v8
        env:
          STATUS: ${{ needs.deploy.outputs.result }}
          PR_JSON: ${{ needs.parse-info.outputs.pr }}
          ENVIRONMENT: ${{ github.ref_name == 'main' && 'Production' || 'Preview' }}
          WORKER_NAME: ${{ needs.parse-info.outputs.worker-name }}
          WORKER_DOMAIN: ${{ needs.deploy.outputs.url }}
          ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        with:
          script: |
            const pr = JSON.parse(process.env.PR_JSON || '{}');
            const success = process.env.STATUS === 'success';
            const statusCell = success ? ':white_check_mark: Success!' : ':x: Failed!';

            if (!pr || !pr.number) {
              core.warning('No pull request found.');
              return;
            }

            const rows = [
              '| **Status** | ' + statusCell + ' |',
              '| :--- | :--- |',
              `| **Environment** | ${process.env.ENVIRONMENT} |`,
              pr.commit ? `| **Commit** | [\`${pr.commit}\`](https://github.com/${process.env.REPO}/commit/${pr.commit}) |` : null,
              process.env.WORKER_DOMAIN ? `| **URL** | ${process.env.WORKER_DOMAIN} |` : null,
              `| **Details** | :arrow_right: [GitHub Actions](https://github.com/${process.env.REPO}/actions/runs/${process.env.RUN_ID}) <br /> :arrow_right: [Cloudflare Dashboard](https://dash.cloudflare.com/${process.env.ACCOUNT_ID}/workers/services/view/${process.env.WORKER_NAME}/production/deployments) |`,
            ].filter(Boolean);
            const body = ['## âš¡Deploying with Cloudflare Workers', '', ...rows].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(pr.number),
              body
            });

  send-slack-message:
    name: Send Slack message
    runs-on: ubuntu-latest
    needs: [deploy, parse-info]
    if: ${{ needs.parse-info.outputs.pr != ''  }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            .github/actions/setup-slack-payload

      - name: Setup Slack Payload
        id: slack-payload
        uses: ./.github/actions/setup-slack-payload
        with:
          slack_channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          deployed: ${{ needs.deploy.outputs.result == 'success' }}
          environment: ${{ github.ref_name == 'main' && 'Production' || 'Preview' }}
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_worker_name: ${{ needs.parse-info.outputs.worker-name }}
          cloudflare_worker_domain: ${{ needs.deploy.outputs.url }}
          pr_commit: ${{ fromJSON(needs.parse-info.outputs.pr).commit }}
          pr_number: ${{ fromJSON(needs.parse-info.outputs.pr).number }}
          pr_title: ${{ fromJSON(needs.parse-info.outputs.pr).title }}
          pr_url: ${{ fromJSON(needs.parse-info.outputs.pr).url }}
          avatar_url: ${{ fromJSON(needs.parse-info.outputs.pr).avatar_url }}

      - name: Send slack message
        uses: slackapi/slack-github-action@v2
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload-file-path: ${{ steps.slack-payload.outputs.file-path }}
